{"version":3,"sources":["common.js","Entry.js","App.js","serviceWorker.js","index.js"],"names":["STAGES","matchResult","scoreBlue","scoreRed","Entry","props","useState","stage","setStage","setScoreBlue","setScoreRed","locked","setLocked","deleted","setDeleted","latestSR","endSR","setEndSR","notes","setNotes","handleLock","e","useEffect","onUpdate","id","added","Date","toLocaleTimeString","className","title","onClick","name","onChange","target","value","map","key","type","min","isNaN","parseInt","App","entries","setEntries","records","setRecords","totalWin","setTotalWin","totalTie","setTotalTie","totalLoss","setTotalLoss","startingSR","setStartingSR","endingSR","setEndingSR","sessionStarted","labels","datasets","values","chartData","setChartData","handleUpdate","timestamp","console","log","idx","findIndex","splice","push","matchOutcome","valueOf","sort","a","b","filter","length","columns","span","span-s","reserved","shortid","generate","colors","height","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b708cf7a.chunk.js","sourcesContent":["\nexport const STAGES = [\"Ayutthaya\", \"Black Forest\", \"Blizzard World\", \"Busan\", \"Castillo\", \"Ch√¢teau Guillard\", \"Dorado\", \"Ecopoint: Antarctica\", \"Eichenwalde\", \"Hanamura\", \"Havana\", \"Hollywood\", \"Horizon Lunar Colony\", \"Ilios\", \"Junkertown\", \"King's Row\", \"Lijiang Tower\", \"Necropolis\", \"Nepal\", \"Numbani\", \"Oasis\", \"Paris\", \"Petra\", \"Rialto\", \"Route 66\", \"Temple of Anubis\", \"Volskaya Industries\", \"Watchpoint: Gibraltar\"]\n\nexport const matchResult = (scoreBlue, scoreRed) => {\n  return (scoreBlue === scoreRed) ? 'Tie' : (scoreBlue > scoreRed ? 'Win' : 'Loss')\n}\n","/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport { matchResult, STAGES} from './common';\nimport './App.scss';\n\nexport default function Entry(props) {\n  const [stage, setStage] = useState(STAGES[0])\n  const [scoreBlue, setScoreBlue] = useState(0)\n  const [scoreRed, setScoreRed] = useState(0)\n  const [locked, setLocked] = useState(true)\n  const [deleted, setDeleted] = useState(false)\n  const [endSR, setEndSR] = useState(props.latestSR || 0)\n  const [notes, setNotes] = useState('')\n\n  const handleUpdate = () => {\n    props.onUpdate(props.id, stage, scoreBlue, scoreRed, deleted, endSR, props.added)\n  }\n\n  const handleStageSelect = (e) => {\n    setStage(e.target.value)\n  }\n\n  const handleLock = (e) => {\n    setLocked(!locked)\n  }\n\n  const handleDeleted = () => {\n    setDeleted(true)\n  }\n\n  const handleScoreBlue = (e) => {\n    setScoreBlue(e.target.value)\n  }\n\n  const handleScoreRed = (e) => {\n    setScoreRed(e.target.value)\n  }\n\n  const handleEndSR = (e) => {\n    setEndSR(isNaN(parseInt(e.target.value)) ? 0 : parseInt(e.target.value))\n  }\n\n  const handleNotes = (e) => {\n    setNotes(e.target.value)\n  }\n\n  useEffect(() => {\n    handleUpdate()\n  }, [stage, scoreBlue, scoreRed, deleted, endSR])\n\n  if(deleted) {\n    return <></>\n  }\n\n  if(locked) {\n    return (\n      <tr>\n        <td>{stage}</td>\n        <td>{`${scoreBlue} - ${scoreRed}`}</td>\n        <td>{matchResult(scoreBlue, scoreRed)}</td>\n        <td>{endSR}</td>\n        <td>{new Date(props.added).toLocaleTimeString()}</td>\n        <td>{notes}</td>\n        <td><div className=\"clickable emoji\" title=\"Row locked\" onClick={handleLock}>üîí</div></td>\n      </tr>\n    )\n  }\n  else {\n    return (\n      <tr>\n        <td>\n          <select name=\"stage\" onChange={handleStageSelect}>\n            {STAGES.map(e => <option key={e} value={e}>{e}</option>)}\n          </select>\n        </td>\n        <td><input type=\"number\" min={0} value={scoreBlue} onChange={handleScoreBlue} /> - <input type=\"number\" min={0} value={scoreRed} onChange={handleScoreRed} /></td>\n        <td>{matchResult(scoreBlue, scoreRed)}</td>\n        <td><input type=\"number\" min={0} value={endSR} onChange={handleEndSR} /></td>\n        <td>{new Date(props.added).toLocaleTimeString()}</td>\n        <td><textarea onChange={handleNotes}>{notes}</textarea></td>\n        <td><div className=\"clickable emoji\" title=\"Row unlocked\" onClick={handleLock}>üîì</div></td>\n        <td><div className=\"clickable emoji\" title=\"Delete\" onClick={handleDeleted}>‚ùå</div></td>\n      </tr>\n    )\n  }\n\n}\n","/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport Entry from './Entry'\nimport { matchResult } from './common'\nimport shortid from 'shortid'\nimport ReactFrappeChart from 'react-frappe-charts'\n\nimport '@cougargrades/raster/raster2-react'\nimport '@cougargrades/raster/raster.grid.css'\n\nimport './App.scss';\n\nexport default function App() {\n  const [entries, setEntries] = useState([])\n  const [records, setRecords] = useState([])\n  const [totalWin, setTotalWin] = useState(0)\n  const [totalTie, setTotalTie] = useState(0)\n  const [totalLoss, setTotalLoss] = useState(0)\n\n  const [startingSR, setStartingSR] = useState(0)\n  const [endingSR, setEndingSR] = useState(0)\n  const [sessionStarted, _] = useState(new Date())\n\n  const [chartData, setChartData] = useState({\n    labels: [\"Starting SR\"],\n    datasets: [{ values: [startingSR] }]\n  })\n\n  const handleUpdate = (key, stage, scoreBlue, scoreRed, deleted, endSR, timestamp) => {\n    console.log(key, stage, scoreBlue, scoreRed, deleted, endSR)\n\n    // If performing a delete operation, take care of it and exit\n    if (deleted) {\n      let idx = records.findIndex(e => e.key === key)\n      records.splice(idx, 1)\n      setRecords(records)\n      console.log('deleted', records)\n    }\n    // if record doesn't exist for this key\n    else if (records.findIndex(e => e.key === key) === -1) {\n      records.push({\n        key: key,\n        stage: stage,\n        matchOutcome: matchResult(scoreBlue, scoreRed),\n        endSR: endSR,\n        timestamp: new Date(timestamp).valueOf()\n      })\n      console.log('pushed', records)\n    }\n    else {\n      // otherwise, modify our record for this key\n      const idx = records.findIndex(e => e.key === key)\n      records[idx].matchOutcome = matchResult(scoreBlue, scoreRed)\n      records[idx].endSR = endSR\n      records[idx].stage = stage\n      console.log('in-placed', records)\n    }\n\n    setChartData({\n      labels: [\n        'Starting SR',\n        ...(records\n          .sort((a, b) => a.timestamp - b.timestamp)\n          .map(e => e.stage))\n      ],\n      datasets: [{ values: [\n        startingSR,\n        ...(records\n          .sort((a, b) => a.timestamp - b.timestamp)\n          .map(e => e.endSR))\n      ]\n      }]\n    })\n\n    // update state\n    setTotalWin(records.filter(e => e.matchOutcome === 'Win').length)\n    setTotalTie(records.filter(e => e.matchOutcome === 'Tie').length)\n    setTotalLoss(records.filter(e => e.matchOutcome === 'Loss').length)\n    setEndingSR(records.length > 0 ? records[records.length - 1].endSR : startingSR)\n    setRecords(records);\n  }\n\n  const handleClick = (e) => {\n    let latestSR = records.length > 0 ? records[records.length - 1].endSR : startingSR\n    let reserved = shortid.generate()\n\n    setEntries([\n      ...entries,\n      <Entry key={reserved} id={reserved} onUpdate={handleUpdate} added={new Date()} latestSR={latestSR} />\n    ])\n  }\n\n  const handleStartingSR = (e) => {\n    setStartingSR(e.target.value)\n    if (entries.filter(e => e !== null).length === 0) {\n      setEndingSR(e.target.value)\n    }\n    setChartData({\n      labels: [\n        'Starting SR',\n        ...(records\n          .sort((a, b) => a.timestamp - b.timestamp)\n          .map(e => e.stage))\n      ],\n      datasets: [{ values: [\n        startingSR,\n        ...(records\n          .sort((a, b) => a.timestamp - b.timestamp)\n          .map(e => e.endSR))\n      ]\n      }]\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <r-grid columns={8}>\n          <r-cell span=\"1-4\" span-s=\"row\">\n            <h4 className=\"title\">Win/Loss</h4>\n            <div className=\"starting-sr\">\n              Starting SR: <input type=\"number\" value={startingSR} onChange={handleStartingSR} />\n            </div>\n            <a className=\"button\" onClick={handleClick}>New row</a>\n            <h1 className=\"win-loss\">\n              {`${totalWin} - ${totalLoss}`}\n              <span className=\"ties\">{totalTie > 0 ? `, ${totalTie} tie${totalTie > 1 ? 's' : ''}` : ''}</span>\n            </h1>\n            <h3 className=\"sr\">{`${endingSR - startingSR >= 0 ? '+' : ''}${endingSR - startingSR} SR`}<span className=\"small\"><br />Page opened @ {sessionStarted.toLocaleTimeString()}</span></h3>\n          </r-cell>\n          <r-cell span=\"5-8\" span-s=\"row\">\n            <ReactFrappeChart\n              type=\"line\"\n              colors={[\"#c213f4\"]}\n              height={450}\n              data={chartData}\n            />\n          </r-cell>\n        </r-grid>\n      </header>\n      <hr />\n      <table>\n        <thead>\n          <tr>\n            <th>Map</th>\n            <th>Score</th>\n            <th>Win/Loss</th>\n            <th>End SR</th>\n            <th>Time added</th>\n            <th>Notes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {entries}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}